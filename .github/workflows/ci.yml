name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v5

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python3.12/site-packages
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Conan
        uses: actions/cache@v4
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan-${{ hashFiles('conanfile.txt') }}
          restore-keys: |
            ${{ runner.os }}-conan-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install conan==2.5.0
          pip install colorama==0.4.6

      - name: Detect Conan profile
        run: conan profile detect --force

      - name: Install Conan dependencies
        run: conan install . --output-folder=build --build=missing

      - name: Configure
        run: cmake --preset default

      - name: Build
        run: cmake --build --preset default

      - name: Upload necessary build files
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            build/CMakeCache.txt
            build/CTestTestfile.cmake
            build/tests/tests
          retention-days: 7

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download necessary build files
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build

      - name: Add execute permissions to test binary
        run: chmod +x build/tests/tests

      - name: Run tests
        run: ctest --preset default --test-dir build

  docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache Doxygen binary
        id: cache-doxygen
        uses: actions/cache@v4
        with:
          path: ~/doxygen-1.10.0
          key: ${{ runner.os }}-doxygen-1.10.0
          restore-keys: |
            ${{ runner.os }}-doxygen-

      - name: Install Doxygen if not cached
        if: steps.cache-doxygen.outputs.cache-hit != 'true'
        run: |
          DOXYGEN_VERSION=1.10.0
          mkdir -p ~/doxygen-1.10.0
          wget https://github.com/doxygen/doxygen/releases/download/Release_1_10_0/doxygen-${DOXYGEN_VERSION}.linux.bin.tar.gz
          tar -xzf doxygen-${DOXYGEN_VERSION}.linux.bin.tar.gz -C ~/doxygen-1.10.0 --strip-components=1

      - name: Install Graphviz
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: graphviz
          version: 1.0

      - name: Generate Doxygen documentation
        run: ~/doxygen-1.10.0/bin/doxygen Doxyfile

      - name: Upload Doxygen documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: doxygen-docs
          path: docs/html

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: docs
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Doxygen documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: doxygen-docs
          path: docs/html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/html
          publish_branch: gh-pages
